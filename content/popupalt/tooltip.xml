<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Popup ALT Attribute.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2002-2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="tooltipBindings"
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:xbl="http://www.mozilla.org/xbl">

<binding id="tooltip" extends="chrome://global/content/bindings/popup.xml#tooltip">
	<implementation>
		<field name="mLabel">
			null
		</field>

		<constructor><![CDATA[
			this.mLabel = document.getAnonymousNodes(this)[0];
		]]></constructor>

		<method name="clearContent">
			<body><![CDATA[
				var label = this.mLabel;
				if (!label) return;

				var range = document.createRange();
				range.selectNodeContents(label);
				range.deleteContents();
				range.selectNodeContents(this);
				range.deleteContents();
				range.detach();

				label.removeAttribute('multiline');
				label.removeAttribute('style');
				label.removeAttribute('width');
				label.removeAttribute('height');
				label.removeAttribute('value');

				this.removeAttribute('label');
				this.removeAttribute('style');
				this.removeAttribute('width');
				this.removeAttribute('height');
//				this.sizeTo(this.boxObject.width, this.boxObject.height);
			]]></body>
		</method>
	</implementation>

	<handlers>
		<handler event="DOMAttrModified"><![CDATA[
			if (event.attrName != 'label') return;

			var label = this.mLabel;
			var range = document.createRange();
			range.selectNodeContents(label);
			range.deleteContents();
			range.detach();


			label.setAttribute('multiline', true);
			label.removeAttribute('crop');

			var newText = event.newValue;
			var newNode = document.createTextNode(newText);

			label.appendChild(newNode);

			label.removeAttribute('value');
			label.removeAttribute('style');

			this.removeAttribute('style');
			this.removeAttribute('width');
			this.removeAttribute('height');
			this.sizeTo(this.boxObject.width, this.boxObject.height);

			if (!newText) return;


			var tooltip = this;

			var height = parseInt(window.getComputedStyle(label, '').getPropertyValue('height'));
			if (height) {
				label.setAttribute(
					'style',
					'height:'+height+'px !important;'
				);
				tooltip.setAttribute(
					'style',
					'height:'+tooltip.boxObject.height+'px !important;'
				);
			}
			else {
				window.setTimeout(function() {
					label.removeAttribute('value');

					var height = parseInt(window.getComputedStyle(label, '').getPropertyValue('height'));
					if (height) {
						label.setAttribute(
							'style',
							'height:'+height+'px !important;'
						);
						tooltip.setAttribute(
							'style',
							'height:'+tooltip.boxObject.height+'px !important;'
						);
					}
				}, 0);
			}
		]]></handler>

	</handlers>
</binding>

</bindings>
